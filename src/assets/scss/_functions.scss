@use "sass:math" as *;
@use "sass:meta" as *;
@use "sass:map" as *;
@use "sass:list" as *;
@use "./colors" as *;
@use "./settings" as *;

// Unit Stripe
@function strip($value) {
  @if type-of($value) != "number" {
    @error "Invalid `#{type-of($value)}` type. Choose a number type instead.";
  } @else if type-of($value) == "number" and not is-unitless($value) {
    @return div($value, ($value * 0 + 1));
  }

  @return $value;
}

// Convert string to number
@function toNumber($value) {
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == "-";
  $numbers: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == ".") {
      @if $character == "." {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
  }

  @return if($minus, -$result, $result);
}

// Get CSS Var
@function v($name, $fallback: null) {
  @if ($fallback) {
    @return var(--#{$name}, #{$fallback});
  } @else {
    @return var(--#{$name});
  }
}

// Get SCSS Color Var
@function c($name, $theme: null) {
  @if $theme {
    @if has-key($theme, $name) {
      @return get($theme, $name);
    }
  } @else {
    @if has-key($colors, $name) {
      @return get($colors, $name);
    }
  }
  @return null;
}

// Fluid All the Things
// @function fluid-size($min: 10px, $max: 20px, $breakpoint: 768) {
//   @return clamp(#{$min}, (#{strip($max)} / #{$breakpoint}) * 100vw, #{$max});
// }

@function remToPx($value, $remValue) {
  @return toNumber(stripe($value)) * $remValue;
}

@function pxToRem($value, $remValue) {
  @return div($value, $remValue);
}

@function fluid-rem(
  $min: 1rem,
  $max: 3rem,
  $breakpoints: 375 $container,
  $remValue: 16
) {
  $minSizeStriped: strip($min);
  $maxSizeStriped: strip($max);
  $minWidthRem: pxToRem(nth($breakpoints, 1), $remValue);
  $maxWidthRem: pxToRem(nth($breakpoints, 2), $remValue);

  $sizeDif: $maxSizeStriped - $minSizeStriped;
  $widthDif: $maxWidthRem - $minWidthRem;

  $slope: div($sizeDif, $widthDif);

  $yAxisIntersection: ((-1 * $minWidthRem) * $slope) + $minSizeStriped;

  @return clamp(#{$min}, #{$yAxisIntersection}rem + #{$slope * 100}vw, #{$max});
}

@function fluid-px(
  $min: 16px,
  $max: 32px,
  $breakpoints: 375 $container,
  $remValue: 16
) {
  $stripedMin: strip($min);
  $stripedMax: strip($max);
  $minBreakPoint: nth($breakpoints, 1);
  $maxBreakPoint: nth($breakpoints, 2);

  $sizeDif: $stripedMax - $stripedMin;
  $widthDif: $maxWidthRem - $minWidthRem;

  $slope: div($sizeDif, $widthDif);
  $yAxisIntersection: ((-1 * $minWidthRem) * $slope) + $minSizeStriped;

  $prefered: "#{pxToRem(strip($min), $remValue)}rem + (#{strip($max)} - #{strip($min)}) * ((100vw - #{nth($breakpoints, 1)}px) / (#{nth($breakpoints, 2)} - #{nth($breakpoints, 1)}))";

  @return clamp(#{$min}, #{$prefered}, #{$max});
}
